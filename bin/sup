#!/bin/sh
#
# sup(1) - do <whatever SCM> update
#
# Copyright (c) 2008, 2009, 2012, 2013 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

main () {
    case "$(basename "$0")" in
        sup)
            sup "${@:-.}"
            ;;
        *)
            vcs "${@:-.}"
            ;;
    esac
}

warn () {
    echo "$0: $@" >&2
}

dir_of () {
    local file="${1:-.}"; shift
    if [ -d "$file" ]; then
        echo "$file"
    else
        dirname "$file"
    fi
}

vcs_of () {
    local file="${1:-.}" dir; shift
    (
        dir="$(dir_of "$file")"

        cd "$dir" || exit

        if [ -f config -a -d objects -a -d refs ]; then
            case "$dir" in
                ?*.git)
                    echo git-bare
                    exit
                    ;;
            esac
        fi

        (
        while :; do
            if [ -d .git ]; then
                if [ -d .git/svn ]; then
                    if [ -z "$(find .git/svn -type f -print)" ]; then
                        rm -rf .git/svn
                        echo git
                    else
                        echo git-svn
                    fi
                else
                    echo git
                fi
                exit
            elif [ -d .hg ]; then
                echo hg
                exit
            elif [ -d .bzr ]; then
                echo bzr
                exit
            elif [ -d .svn ]; then
                echo svn
                exit
            fi

            if [ "$(pwd)" = / ]; then
                break
            fi
            cd -P ..
        done
        )

        if [ -d "$dir"/CVS ]; then
            echo cvs
            exit
        fi

        exit 1
    )
}

setup () {
    trap 'exit 129' 1
    trap 'exit 130' 2
    trap 'exit 131' 3
    trap 'exit 143' 15
}

sup () {
    local file ret=0

    for file; do
        do_sup "$(vcs_of "$file")" "$file" || ret="$?"
    done

    if [ $ret -gt 128 ]; then
        if [ $ret -le 165 ]; then
            kill -$((ret - 128)) $$
            sleep 3
        fi
        exit "$ret"
    fi

    return $ret
}

do_sup () {
    local vcs="$1" file="$2"
    local dir="$(dir_of "$file")"
    local ret=0

    if [ -z "$vcs" ]; then
        warn "VCS unknown"
        return 1
    fi

    case "$vcs" in
        svn)
            echo "[Updating \`$file' with $vcs]"
            ( setup; "$vcs" update "$file" )
            ;;
        cvs)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && cvs update )
            else
                ( setup; cd "$dir" && cvs update "$(basename "$file")" )
            fi
            ;;
        git|git-svn)
            if [ "$vcs" = git ]; then
                echo "[Updating \`$file' with $vcs]"
            else
                echo "[Updating \`$file' with git + $vcs]"
            fi
            ( setup; cd "$dir" && {
                    if [ "$vcs" = git-svn ]; then
                        git svn fetch || exit
                    fi
                    if git remote update; then
                        local="$(git symbolic-ref HEAD 2>/dev/null)"
                        if [ -n "$local" ]; then
                            remote="$(git for-each-ref --format='%(upstream:short)' "$local" 2>/dev/null)"
                            if [ -n "$remote" ]; then
                                git rebase "$remote" || exit
                            fi
                        fi
                    fi
                    if [ "$vcs" = git-svn ]; then
                        git svn rebase -l
                    fi
                    git submodule update --init --recursive
                } )
            ;;
        git-bare)
            echo "[Updating \`$file' with $vcs]"
            ( setup; GIT_DIR="$dir" git fetch )
            ;;
        hg)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && hg pull -u )
            else
                ( setup; cd "$dir" && {
                        hg pull
                        hg update "$file"
                    } )
            fi
            ;;
        bzr)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && bzr update && bzr merge )
            else
                ( setup; cd "$dir" && {
                        bzr update
                        bzr merge "$file"
                    } )
            fi
            ;;
        *)
            warn "Skipping \`$file'"
            ;;
    esac
}

vcs () {
    local file ret=0

    for file; do
        local vcs="$(vcs_of "$file")" 

        if [ -z "$vcs" ]; then
            warn "unknown"
            ret=1
        fi

        echo "$vcs"
    done

    return "$ret"
}

main "$@"
