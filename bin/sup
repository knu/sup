#!/bin/sh
#
# sup(1) - do <whatever SCM> update
#
# Copyright (c) 2008-2023 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

main () {
    local opt ret=0

    while getopts eqr opt; do
        case "$opt" in
            e)
                # show error only
                OPT_e=t
                ;;
            q)
                OPT_q=t
                ;;
            r)
                OPT_r=t
                ;;
            *)
                echo "$0: illegal option -- $OPTARG" >&2
                exit 64
        esac
    done

    shift $((OPTIND - 1))

    case "$(basename "$0")" in
        sup)
            unset MYTMPDIR
            setup
            sup "${@:-.}" || ret="$?"
            teardown
            return $ret
            ;;
        *)
            vcs "${@:-.}"
            ;;
    esac
}

warn () {
    [ -n "$OPT_q" ] ||
        echo "$0: $*" >&2
}

sh_escape () {
    case "$*" in
        '')
            echo "''"
            ;;
        *[!A-Za-z0-9_.,:/@-]*)
            awk '
                BEGIN {
                    n = ARGC - 1
                    for (i = 1; i <= n; i++) {
                        s = ARGV[i]
                        gsub(/[^\nA-Za-z0-9_.,:\/@-]/, "\\\\&", s)
                        gsub(/\n/, "\"\n\"", s)
                        printf "%s", s
                        if (i != n) printf " "
                    }
                    exit 0
                }
                ' "$@"
            ;;
        *)
            printf '%s' "$*" 
            ;;
    esac
}

dir_of () {
    local file="${1:-.}"; shift
    if [ -d "$file" ]; then
        echo "$file"
    else
        dirname "$file"
    fi
}

vcs_of () {
    local file="${1:-.}" dir; shift
    (
        dir="$(dir_of "$file")"

        cd "$dir" || exit

        if [ -f config -a -d objects -a -d refs ]; then
            case "$dir" in
                ?*.git)
                    echo git-bare
                    exit
                    ;;
            esac
        fi

        (
        while :; do
            if [ -d .git ]; then
                if [ -d .git/svn ]; then
                    if [ -z "$(find .git/svn -type f -print)" ]; then
                        rm -rf .git/svn
                        echo git
                    else
                        echo git-svn
                    fi
                else
                    echo git
                fi
                exit
            elif [ -f .git ]; then
                echo git
                exit
            elif [ -d .hg ]; then
                echo hg
                exit
            elif [ -d .bzr ]; then
                echo bzr
                exit
            elif [ -d .svn ]; then
                echo svn
                exit
            fi

            if [ "$(pwd)" = / ]; then
                break
            fi
            cd -P ..
        done
        )

        if [ -d CVS ]; then
            echo cvs
            exit
        fi

        exit 1
    )
}

setup () {
    if [ -n "$MYTMPDIR" ]; then
        MYTMPDIR=$(mktemp -d "${MYTMPDIR}/XXXXXX")
    else
        MYTMPDIR=$(mktemp -d "${TMPDIR-/tmp}/${0##*/}.XXXXXX")
    fi
    trap 'teardown; exit 129' 1
    trap 'teardown; exit 130' 2
    trap 'teardown; exit 131' 3
    trap 'teardown; exit 143' 15
}

teardown () {
    rm -rf "$MYTMPDIR"
}

handle_status () {
    local ret=$1

    [ -n "$ret" ] || return

    if [ $ret -gt 128 ]; then
        if [ $ret -le 165 ]; then
            kill -$((ret - 128)) $$
            sleep 3
        fi
        exit $ret
    fi
}

sup () {
    local file ret=0 dir

    for file; do
        sup_1 "$(vcs_of "$file")" "$file" || ret="$?"
        handle_status $ret
        if [ -n "$OPT_r" -a -f "$file/.sup" ]; then
            eval "sup $(subdirs_escaped "$file")" || ret="$?"
            handle_status $ret
        fi
    done

    return $ret
}

sup_1 () {
    if [ -n "$OPT_e" ]; then
        local ret=0 logfile="$(mktemp "$MYTMPDIR"/log.XXXXXX)"
        do_sup "$@" </dev/null >"$logfile" 2>&1 || ret="$?"
        [ "$ret" -eq 0 ] || cat "$logfile"
        return $ret
    else
        do_sup "$@"
    fi
}

do_sup () {
    local vcs="$1" file="$2"
    local dir="$(dir_of "$file")"
    local ret=0

    if [ -z "$vcs" ]; then
        if [ -n "$OPT_e" ]; then
            return 0
        else
            warn "VCS unknown: $file"
            return 1
        fi
    fi

    case "$vcs" in
        svn)
            echo "[Updating \`$file' with $vcs]"
            ( setup; svn_upgrade "$file"; svn_update "$file" )
            ;;
        cvs)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && cvs update )
            else
                ( setup; cd "$dir" && cvs update "$(basename "$file")" )
            fi
            ;;
        git|git-svn)
            if [ "$vcs" = git ]; then
                echo "[Updating \`$file' with $vcs]"
            else
                echo "[Updating \`$file' with git + $vcs]"
            fi
            ( setup; cd "$dir" && {
                    if [ "$vcs" = git-svn ]; then
                        git svn fetch || exit
                    fi
                    if git_remote_update; then
                        local="$(git symbolic-ref HEAD 2>/dev/null)"
                        if [ -n "$local" ]; then
                            remote="$(git for-each-ref --format='%(upstream:short)' "$local" 2>/dev/null)"
                            # If local has been fastforwarded to upstream by hub sync, skip rebasing.
                            if [ -n "$remote" -a -n "$(git rev-list --max-count 1 "$local..$remote")" ]; then
                                git rebase "$remote" || exit
                            fi
                        fi
                    else
                        ret=$?
                        if [ "$ret" -eq 0 ]; then
                            :
                        elif [ "$ret" -eq 127 ]; then
                            exit 0
                        else
                            handle_status "$ret"

                            git branch | cut -c3- | while read local; do
                                remote="$(git_tracking_remote "$local")" || continue
                                branch="$(git_tracking_branch "$local")" || continue
                                if [ "$branch" = master ] && git_remote_branch_exists "$remote/main" &&
                                       ! git_remote_branch_exists "$remote/$branch"; then
                                    warn "Updating the tracking branch of $local from $remote/master to $remote/main"
                                    git config "branch.$local.merge" main
                                    if [ "$local" = master ]; then
                                        warn "Renaming $local to main"
                                        git branch -m "$local" main
                                    fi
                                fi
                            done
                        fi
                    fi
                    if type git-delete-merged >/dev/null 2>&1; then
                        git-delete-merged
                    fi
                    if [ "$vcs" = git-svn ]; then
                        git svn rebase -l
                    fi
                    git submodule update --init --recursive
                    exit $ret
                } )
            ;;
        git-bare)
            echo "[Updating \`$file' with $vcs]"
            ( setup; GIT_DIR="$dir" git fetch )
            ;;
        hg)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && hg pull -u )
            else
                ( setup; cd "$dir" && {
                        hg pull
                        hg update "$file"
                    } )
            fi
            ;;
        bzr)
            echo "[Updating \`$file' with $vcs]"
            if [ -d "$file" ]; then
                ( setup; cd "$file" && bzr update && bzr merge )
            else
                ( setup; cd "$dir" && {
                        bzr update
                        bzr merge "$file"
                    } )
            fi
            ;;
        *)
            [ -z "$OPT_e" ] || return 0
            warn "Skipping \`$file'"
            ;;
    esac
}

subdirs_escaped () {
    local dir=$1 listfile excludelistfile tmpfile line exclude excluded

    [ -f "$dir/.sup" ] || return

    listfile="$(mktemp "$MYTMPDIR"/list.XXXXXX)"

    while read -r pat; do
        case "$pat" in
            ([#]*)
                continue
                ;;
            ([-\!]*)
                pat=${pat#?}
                excludelistfile="$(mktemp "$MYTMPDIR"/excludelist.XXXXXX)"
                tmpfile="$(mktemp "$MYTMPDIR"/tmp.XXXXXX)"
                eval "printf '%s\n' \$dir/$pat" > "$excludelistfile"
                while read -r line; do
                    excluded=
                    while read -r exclude; do
                        case "$line" in
                            "$exclude"|"$exclude"/*)
                                excluded=t
                                break
                                ;;
                        esac
                    done < "$excludelistfile"
                    [ -n "$excluded" ] || printf '%s\n' "$line"
                done < "$listfile" > "$tmpfile"
                mv "$tmpfile" "$listfile"
                rm -f "$excludelistfile"
                ;;
            ([+]*|*)
                eval "printf '%s\n' \$dir/$pat" >> "$listfile"
        esac
    done < "$dir/.sup"

    sort -u "$listfile" |
        while read -r subdir; do
            if [ -d "$subdir" -a ! -L "$subdir" ]; then
                printf ' %s' "$(sh_escape "$subdir")"
            fi
        done

    rm -f "$listfile"
}

vcs () {
    local file ret=0

    for file; do
        local vcs="$(vcs_of "$file")" 

        if [ -z "$vcs" ]; then
            warn "VCS unknown: $file"
            ret=1
        fi

        echo "$vcs"
    done

    return $ret
}

svn_upgrade () {
    local dir="$1" output
    if [ -f "$dir" ]; then
        dir="$(dirname "$dir")"
    fi
    (
        cd "$dir" || exit 1
        output="$(svn upgrade 2>&1)"
        case "$output" in
            '')
                exit
                ;;
            'svn: E155019:'*" root is '"*"'")
                svn upgrade "$(expr "$output" : ".* root is '\\(.*\\)'.*")"
                exit
                ;;
            *)
                exit 1
        esac
    )
}

svn_update () {
    local file="$1"
    ( cd "$(dirname "$file")" && svn up "$(basename "$file")" )
}

run_ruby () {
    local ruby
    for ruby in /usr/bin/ruby /usr/local/bin/ruby /usr/pkg/bin/ruby; do
        if [ -x "$ruby" ]; then
            "$ruby" "$@"
            return $?
        fi
    done

    ruby="$(cd && { asdf which ruby || rbenv which ruby; } 2>/dev/null)"
    if [ -x "$ruby" ]; then
        "$ruby" "$@"
    else
        ruby "$@"
    fi
}

git_remote_update () {
    if ! git symbolic-ref refs/remotes/origin/HEAD >/dev/null 2>&1 &&
           ! git remote show origin | grep -q '^  HEAD branch: [^ (]'
    then
        warn "This repository seems to be empty."
        return 127
    fi
    if { type hub && type ruby; } >/dev/null 2>&1; then
        run_ruby -e 'rs=`git remote`.split;m,=%w[upstream github origin]&rs|rs;m&&fork{puts"Fetching "<<m;exec"hub -c gc.auto=0 sync"};(rs-[m]).each{|r|fork{exec *%w[git -c gc.auto=0 remote update -p]<<r}};exit Process.waitall.map{|p,s|s.exitstatus}.max||0'
    elif xargs -P1 </dev/null >/dev/null 2>&1; then
        git remote | xargs -P5 -n1 git -c gc.auto=0 remote update --prune
    else
        git remote update --prune
    fi
}

git_local_branch_exists () {
    git show-ref --verify --quiet refs/heads/"$1"
}

git_remote_branch_exists () {
    git show-ref --verify --quiet refs/remotes/"$1"
}

git_current_branch () {
    git branch --show-current
}

git_tracking_remote () {
    git config "branch.${1:-$(git_current_branch)}.remote"
}

git_tracking_branch () {
    local ref="$(git config "branch.${1:-$(git_current_branch)}.merge")" || return
    printf '%s\n' "${ref#refs/heads/}"
}

main "$@"
